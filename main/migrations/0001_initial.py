# Generated by Django 2.2.5 on 2022-05-06 21:04

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_google_maps.fields
import main.models
import mptt.fields
import phonenumber_field.modelfields
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('is_seller', models.BooleanField(default=False)),
                ('is_customer', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', main.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True)),
                ('name', models.CharField(max_length=50)),
                ('slug', models.SlugField(max_length=48)),
            ],
            options={
                'verbose_name_plural': 'Companies',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', django_google_maps.fields.AddressField(max_length=200)),
                ('slug', models.SlugField(max_length=48)),
                ('geolocation', django_google_maps.fields.GeoLocationField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Manufacturer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('slug', models.SlugField(max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('structure', models.CharField(choices=[('standalone', 'Stand-alone product'), ('parent', 'Parent product'), ('child', 'Child product')], default='standalone', max_length=10)),
                ('name', models.CharField(max_length=64)),
                ('slug', models.SlugField(max_length=64)),
                ('active', models.BooleanField(default=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Bag',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.Product')),
                ('type', models.CharField(choices=[('SHOULDER', 'Shoulder'), ('CROSSBOY', 'Cross'), ('TOTE', 'Hand'), ('BACKPACK', 'Back'), ('BRIEFCASE', 'Briefcase'), ('OTHER', 'Other')], default='SHOULDER', max_length=15)),
                ('color', models.CharField(choices=[('red', 'Red'), ('pink', 'Pink'), ('lightpink', 'Rose'), ('orange', 'Orange'), ('Gold', 'Gold'), ('yellow', 'Yellow'), ('purple', 'Purple'), ('green', 'Green'), ('blue', 'Blue'), ('LightBlue', 'Blue'), ('brown', 'Brown'), ('gray', 'Gray'), ('silver', 'Silver'), ('beige', 'Beige'), ('black', 'Black'), ('white', 'White')], default='white', max_length=15)),
                ('material', models.CharField(choices=[('LEATHER', 'Leather'), ('TEXTILE', 'Fabric'), ('SYNTHETIC', 'Synthetic'), ('LEATHERETTE', 'Leatherette'), ('OTHER', 'Other')], default='COTTON', max_length=15)),
            ],
            bases=('main.product',),
        ),
        migrations.CreateModel(
            name='ClothingProduct',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.Product')),
                ('size', models.IntegerField(choices=[(10, 'XXS'), (20, 'XS'), (30, 'S'), (40, 'M'), (50, 'L'), (60, 'XL'), (70, 'XXL')], default=40)),
                ('color', models.CharField(choices=[('red', 'Red'), ('pink', 'Pink'), ('lightpink', 'Rose'), ('orange', 'Orange'), ('Gold', 'Gold'), ('yellow', 'Yellow'), ('purple', 'Purple'), ('green', 'Green'), ('blue', 'Blue'), ('LightBlue', 'Blue'), ('brown', 'Brown'), ('gray', 'Gray'), ('silver', 'Silver'), ('beige', 'Beige'), ('black', 'Black'), ('white', 'White')], default='white', max_length=15)),
                ('material', models.CharField(choices=[('LEATHER', 'Leather'), ('COTTON', 'Cotton'), ('WOOL', 'Wool'), ('POLYESTER', 'Polyester'), ('OTHER', 'Other')], default='COTTON', max_length=15)),
            ],
            bases=('main.product',),
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('birth_date', models.DateField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('gender', models.IntegerField(choices=[(10, 'Man'), (20, 'Woman')], default=10)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
                ('device_id', models.CharField(max_length=50)),
                ('orange_points', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='FootwearProduct',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.Product')),
                ('size', models.CharField(choices=[('red', 'Red'), ('pink', 'Pink'), ('orange', 'Orange'), ('yellow', 'Yellow'), ('purple', 'Purple'), ('green', 'Green'), ('blue', 'Blue'), ('LightBlue', 'Blue'), ('brown', 'Brown'), ('gray', 'Gray'), ('black', 'Black'), ('white', 'White')], default='', max_length=15)),
                ('color', models.CharField(choices=[('red', 'Red'), ('pink', 'Pink'), ('orange', 'Orange'), ('yellow', 'Yellow'), ('purple', 'Purple'), ('green', 'Green'), ('blue', 'Blue'), ('LightBlue', 'Blue'), ('brown', 'Brown'), ('gray', 'Gray'), ('black', 'Black'), ('white', 'White')], default='white', max_length=15)),
                ('material', models.CharField(choices=[('LEATHER', 'Leather'), ('TEXTILE', 'Cotton'), ('SYNTHETIC', 'Synthetics'), ('LEATHERETTE', 'Leatherette'), ('OTHER', 'Other')], default='COTTON', max_length=15)),
            ],
            bases=('main.product',),
        ),
        migrations.CreateModel(
            name='Seller',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.Product')),
                ('type', models.CharField(choices=[('CARDS', 'Cards'), ('COINS', 'Coins'), ('TRAVEL', 'Travel'), ('CLASSIC', 'Classic'), ('OTHER', 'Other')], default='SHOULDER', max_length=15)),
                ('type_of_closing', models.CharField(choices=[('CLIP', 'Clip'), ('ZIPPER', 'Zipper'), ('VELCRO', 'Velcro'), ('CLASP', 'Clasp'), ('OTHER', 'Other')], default='CLIP', max_length=15)),
                ('color', models.CharField(choices=[('red', 'Red'), ('pink', 'Pink'), ('lightpink', 'Rose'), ('orange', 'Orange'), ('Gold', 'Gold'), ('yellow', 'Yellow'), ('purple', 'Purple'), ('green', 'Green'), ('blue', 'Blue'), ('LightBlue', 'Blue'), ('brown', 'Brown'), ('gray', 'Gray'), ('silver', 'Silver'), ('beige', 'Beige'), ('black', 'Black'), ('white', 'White')], default='white', max_length=15)),
                ('material', models.CharField(choices=[('LEATHER', 'Leather'), ('TEXTILE', 'Fabric'), ('SYNTHETIC', 'Synthetics'), ('LEATHERETTE', 'Leatherette'), ('OTHER', 'Other')], default='COTTON', max_length=15)),
            ],
            bases=('main.product',),
        ),
        migrations.CreateModel(
            name='Watch',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.Product')),
                ('display', models.CharField(choices=[('ANALOG', 'Analog'), ('DIGITAL', 'Digital')], default='ANALOG', max_length=15)),
                ('mechanism', models.CharField(choices=[('AUTOMATIC', 'Auto'), ('SOLAR', 'Solar'), ('BATTERY', 'Battery'), ('ECO DRIVE', 'Eco Drive'), ('OTHER', 'Other')], default='BATERY', max_length=15)),
                ('band_material', models.CharField(choices=[('METAL', 'Metallic'), ('LEATHER', 'Leather'), ('SILICONE', 'Silicone'), ('TEXTILE', 'Fabric'), ('OTHER', 'Other')], default='LEATHER', max_length=15)),
                ('band_color', models.CharField(choices=[('red', 'Red'), ('pink', 'Pink'), ('lightpink', 'Rose'), ('orange', 'Orange'), ('Gold', 'Gold'), ('yellow', 'Yellow'), ('purple', 'Purple'), ('green', 'Green'), ('blue', 'Blue'), ('LightBlue', 'Blue'), ('brown', 'Brown'), ('gray', 'Gray'), ('silver', 'Silver'), ('beige', 'Beige'), ('black', 'Black'), ('white', 'White')], default='white', max_length=15)),
                ('face_color', models.CharField(choices=[('red', 'Red'), ('pink', 'Pink'), ('lightpink', 'Rose'), ('orange', 'Orange'), ('Gold', 'Gold'), ('yellow', 'Yellow'), ('purple', 'Purple'), ('green', 'Green'), ('blue', 'Blue'), ('LightBlue', 'Blue'), ('brown', 'Brown'), ('gray', 'Gray'), ('silver', 'Silver'), ('beige', 'Beige'), ('black', 'Black'), ('white', 'White')], default='white', max_length=15)),
                ('water_resistance', models.IntegerField(choices=[(0, 'No'), (2, '2 Atm'), (3, '3 Atm'), (5, '5 Amt'), (10, '10 Atm'), (20, '20 Atm'), (30, '30 Atm'), (40, '40 Atm'), (50, 'Over 40 Atm')], default=5)),
            ],
            options={
                'verbose_name_plural': 'Watches',
            },
            bases=('main.product',),
        ),
        migrations.CreateModel(
            name='SalesProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('quantity', models.PositiveIntegerField(default=0)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sales_product', to='main.Company')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main.Product')),
            ],
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='product-images')),
                ('thumbnail', models.ImageField(null=True, upload_to='product-thumbnails')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='image', to='main.Product')),
            ],
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('slug', models.SlugField(max_length=48)),
                ('type', models.IntegerField(choices=[(0, 'Basic'), (10, 'Clothing'), (20, 'Footwear'), (30, 'Bags'), (35, 'Wallets'), (40, 'Watches')], default=0)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='main.ProductCategory')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=mptt.fields.TreeForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_category', to='main.ProductCategory'),
        ),
        migrations.AddField(
            model_name='product',
            name='manufacturer',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_manufacturer', to='main.Manufacturer'),
        ),
        migrations.AddField(
            model_name='product',
            name='parent',
            field=models.ForeignKey(blank=True, help_text="Only choose a parent product if you're creating a child product.  For example if this is a size 4 of a particular t-shirt.  Leave blank if this is a stand-alone product (i.e. there is only one version of this product).", null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='main.Product', verbose_name='Parent product'),
        ),
        migrations.AddField(
            model_name='product',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='Offer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_open', models.BooleanField(default=False)),
                ('has_expired', models.BooleanField(default=False)),
                ('number_of_customers', models.PositiveIntegerField(default=0)),
                ('start_date', models.DateField(blank=True, help_text='Leave blank if the offer does not have a start day.', null=True)),
                ('end_date', models.DateField(blank=True, help_text='Leave blank if the offer does not have an expiration date.', null=True)),
                ('discount_rate', models.DecimalField(decimal_places=1, default=0, max_digits=4)),
                ('discount_price', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main.Company')),
                ('offer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='offer', to='main.SalesProduct')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main.Product')),
            ],
        ),
        migrations.CreateModel(
            name='CompanyCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('slug', models.SlugField(max_length=48)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='main.CompanyCategory')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='company',
            name='category',
            field=mptt.fields.TreeForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='company_category', to='main.CompanyCategory'),
        ),
        migrations.CreateModel(
            name='Sale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(1)])),
                ('selling_price', models.DecimalField(decimal_places=2, default=0, max_digits=6)),
                ('status', models.IntegerField(choices=[(10, 'In process'), (20, 'Confirmed'), (30, 'Canceled')], default=10, help_text='The possibility of changing the status concerns a period of 7 days.')),
                ('paid_with_money', models.BooleanField(default=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('date_added', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Company')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main.Product')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Customer')),
            ],
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Product')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Customer')),
            ],
        ),
        migrations.CreateModel(
            name='CustomerLocation',
            fields=[
                ('location_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.Location')),
                ('customer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='location', to='main.Customer')),
            ],
            bases=('main.location',),
        ),
        migrations.CreateModel(
            name='CompanyLocation',
            fields=[
                ('location_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.Location')),
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='location', to='main.Company')),
            ],
            options={
                'verbose_name_plural': 'Companies Locations',
            },
            bases=('main.location',),
        ),
        migrations.AddField(
            model_name='company',
            name='owner',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='owns_company', to='main.Seller'),
        ),
    ]
